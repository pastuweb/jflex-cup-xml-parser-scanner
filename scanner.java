/* The following code was generated by JFlex 1.4.1 on 28/02/14 17.58 */

///////////////////////////////////

/// Scanner: protocollo PWXML ////

///////////////////////////////////

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 28/02/14 17.58 from the specification file
 * <tt>C:/tooljava/test/PWXML-protocollo/scanner.flex</tt>
 */
class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\62\1\62\2\0\1\62\22\0\1\12\1\4\1\13\4\0"+
    "\3\4\2\0\1\2\1\4\1\2\1\27\1\11\1\5\1\6\1\7"+
    "\2\10\4\1\2\4\1\14\1\61\1\30\1\4\1\0\1\33\1\3"+
    "\1\31\1\35\1\45\3\3\1\44\2\3\1\21\1\20\1\34\1\32"+
    "\1\15\1\3\1\43\1\53\1\46\1\56\1\55\1\16\1\17\2\3"+
    "\4\0\1\4\1\0\1\40\1\3\1\36\1\42\1\51\3\3\1\50"+
    "\2\3\1\26\1\25\1\41\1\37\1\22\1\3\1\47\1\54\1\52"+
    "\1\60\1\57\1\23\1\24\2\3\145\0\1\4\7\0\1\4\3\0"+
    "\1\4\5\0\1\4\6\0\1\4\uff06\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\10\3\1\10\1\4\1\2\13\0\2\3\1\11"+
    "\4\3\2\2\22\0\10\3\1\2\24\0\1\12\1\13"+
    "\4\3\3\2\23\0\2\3\1\14\1\2\17\0\1\15"+
    "\2\3\3\2\1\16\1\0\1\17\7\0\1\20\2\0"+
    "\2\3\1\2\2\0\1\21\1\0\1\22\4\0\2\3"+
    "\3\2\5\0\1\23\1\24\1\25\3\2\3\0\4\26"+
    "\1\27\1\0\1\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\63"+
    "\0\63\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297"+
    "\0\u02ca\0\63\0\63\0\u02fd\0\u0330\0\314\0\u0363\0\u0396"+
    "\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e"+
    "\0\u0561\0\231\0\u0594\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0330"+
    "\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8"+
    "\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990"+
    "\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28"+
    "\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0"+
    "\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58"+
    "\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\231"+
    "\0\231\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122"+
    "\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba"+
    "\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452"+
    "\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551\0\231\0\u1584\0\u15b7"+
    "\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f"+
    "\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881\0\63\0\u18b4"+
    "\0\u18e7\0\u191a\0\u194d\0\u1980\0\63\0\u19b3\0\63\0\u19e6"+
    "\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\63\0\u1b4b"+
    "\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\63\0\u1cb0"+
    "\0\63\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\u1e15"+
    "\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\63"+
    "\0\63\0\231\0\u1fad\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac"+
    "\0\u10bc\0\u20df\0\u1fad\0\u1fe0\0\63\0\u2112\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\2\5\3\1\5\1\6"+
    "\1\7\12\4\1\10\1\11\3\4\1\12\4\4\1\13"+
    "\2\4\1\14\1\4\1\15\1\4\1\16\1\4\1\17"+
    "\2\4\1\20\1\4\1\21\1\4\1\22\1\23\64\0"+
    "\1\24\1\25\2\0\5\24\52\0\12\4\2\0\12\4"+
    "\2\0\30\4\14\0\1\26\1\6\61\0\1\6\65\0"+
    "\1\27\3\0\1\30\1\31\3\0\1\32\1\33\1\0"+
    "\1\34\4\0\1\35\5\0\1\36\3\0\1\37\13\0"+
    "\12\4\2\0\12\4\2\0\2\4\1\40\25\4\3\0"+
    "\12\4\2\0\12\4\2\0\7\4\1\41\20\4\3\0"+
    "\12\4\2\0\12\4\2\0\4\4\1\42\23\4\3\0"+
    "\12\4\2\0\12\4\2\0\13\4\1\43\14\4\3\0"+
    "\12\4\2\0\12\4\2\0\11\4\1\42\16\4\3\0"+
    "\12\4\2\0\12\4\2\0\17\4\1\44\10\4\3\0"+
    "\12\4\2\0\12\4\2\0\2\4\1\45\25\4\3\0"+
    "\12\4\2\0\12\4\2\0\7\4\1\46\20\4\3\0"+
    "\1\47\1\25\2\0\5\47\52\0\1\50\3\0\5\50"+
    "\67\0\1\51\24\0\1\52\63\0\1\53\41\0\1\54"+
    "\23\0\1\55\63\0\1\56\27\0\1\57\3\0\1\60"+
    "\1\61\3\0\1\62\2\0\1\63\4\0\1\64\5\0"+
    "\1\65\3\0\1\66\44\0\1\67\67\0\1\70\71\0"+
    "\1\71\66\0\1\72\11\0\12\4\2\0\3\4\1\73"+
    "\6\4\2\0\30\4\3\0\12\4\2\0\10\4\1\74"+
    "\1\4\2\0\30\4\3\0\12\4\2\0\1\75\2\4"+
    "\1\76\6\4\2\0\30\4\3\0\12\4\2\0\5\4"+
    "\1\77\2\4\1\100\1\4\2\0\30\4\3\0\12\4"+
    "\2\0\4\4\1\101\5\4\2\0\30\4\3\0\12\4"+
    "\2\0\11\4\1\102\2\0\30\4\3\0\1\103\1\25"+
    "\2\0\5\103\70\0\1\104\75\0\1\105\103\0\1\106"+
    "\33\0\1\107\75\0\1\110\77\0\1\111\24\0\1\112"+
    "\24\0\1\113\63\0\1\114\41\0\1\115\23\0\1\116"+
    "\63\0\1\117\44\0\1\120\67\0\1\121\71\0\1\122"+
    "\66\0\1\123\30\0\1\124\67\0\1\125\102\0\1\126"+
    "\66\0\1\127\12\0\12\4\2\0\12\4\2\0\14\4"+
    "\1\130\13\4\3\0\12\4\2\0\12\4\2\0\20\4"+
    "\1\130\7\4\3\0\12\4\2\0\12\4\2\0\1\4"+
    "\1\131\26\4\3\0\12\4\2\0\12\4\2\0\14\4"+
    "\1\132\13\4\3\0\12\4\2\0\12\4\2\0\6\4"+
    "\1\131\21\4\3\0\12\4\2\0\12\4\2\0\20\4"+
    "\1\133\7\4\3\0\12\4\2\0\12\4\2\0\25\4"+
    "\1\134\2\4\3\0\12\4\2\0\12\4\2\0\27\4"+
    "\1\135\3\0\1\136\1\25\2\0\1\137\3\136\1\140"+
    "\71\0\1\141\57\0\1\142\113\0\1\143\41\0\1\144"+
    "\57\0\1\145\112\0\1\146\27\0\1\147\75\0\1\150"+
    "\103\0\1\151\33\0\1\152\75\0\1\153\77\0\1\154"+
    "\26\0\1\155\67\0\1\156\102\0\1\157\66\0\1\160"+
    "\44\0\1\161\67\0\1\162\42\0\1\163\67\0\1\163"+
    "\36\0\12\4\2\0\12\4\2\0\22\4\1\164\5\4"+
    "\3\0\12\4\2\0\12\4\2\0\23\4\1\165\4\4"+
    "\3\0\12\4\2\0\12\4\2\0\14\4\1\166\13\4"+
    "\3\0\12\4\2\0\12\4\2\0\20\4\1\166\7\4"+
    "\3\0\1\136\1\25\2\0\5\136\52\0\1\136\1\25"+
    "\2\0\2\167\2\136\1\167\52\0\1\167\1\25\2\0"+
    "\4\167\1\136\72\0\1\170\104\0\1\171\52\0\1\172"+
    "\55\0\1\170\103\0\1\173\53\0\1\172\42\0\1\174"+
    "\57\0\1\175\113\0\1\176\41\0\1\177\57\0\1\200"+
    "\112\0\1\201\43\0\1\202\67\0\1\203\42\0\1\204"+
    "\67\0\1\204\71\0\1\205\67\0\1\206\33\0\1\207"+
    "\51\0\12\4\2\0\12\4\2\0\15\4\1\210\12\4"+
    "\3\0\12\4\2\0\12\4\2\0\21\4\1\211\6\4"+
    "\3\0\1\136\1\25\2\0\2\212\1\213\1\136\1\214"+
    "\63\0\1\215\114\0\1\216\30\0\1\217\120\0\1\220"+
    "\33\0\1\221\104\0\1\222\52\0\1\223\55\0\1\221"+
    "\103\0\1\224\53\0\1\223\56\0\1\225\67\0\1\226"+
    "\51\0\1\227\67\0\1\230\67\0\1\231\21\0\12\4"+
    "\2\0\12\4\2\0\2\4\1\232\25\4\3\0\12\4"+
    "\2\0\12\4\2\0\7\4\1\233\20\4\3\0\1\234"+
    "\1\25\2\0\5\234\52\0\1\136\1\25\2\0\1\234"+
    "\3\136\1\234\52\0\1\234\1\25\2\0\4\234\1\136"+
    "\116\0\1\235\66\0\1\236\41\0\1\237\76\0\1\240"+
    "\46\0\1\241\102\0\1\242\47\0\1\243\67\0\1\244"+
    "\52\0\1\245\67\0\1\245\24\0\12\4\2\0\3\4"+
    "\1\246\6\4\2\0\30\4\3\0\12\4\2\0\10\4"+
    "\1\247\1\4\2\0\30\4\3\0\1\250\1\25\2\0"+
    "\1\251\1\252\2\250\1\251\117\0\1\253\66\0\1\254"+
    "\55\0\1\255\66\0\1\256\43\0\1\257\67\0\1\260"+
    "\35\0\1\261\51\0\12\4\2\0\1\262\11\4\2\0"+
    "\30\4\3\0\12\4\2\0\5\4\1\262\4\4\2\0"+
    "\30\4\3\0\1\263\1\25\2\0\5\264\52\0\1\265"+
    "\1\25\2\0\5\265\52\0\1\263\1\25\2\0\3\265"+
    "\1\264\1\265\104\0\1\266\67\0\1\266\70\0\1\267"+
    "\66\0\1\270\40\0\1\260\33\0\1\271\1\25\2\0"+
    "\5\272\52\0\1\273\1\25\2\0\5\273\52\0\1\273"+
    "\1\25\2\0\5\274\63\0\1\275\103\0\1\276\67\0"+
    "\1\276\23\0\1\271\1\25\2\0\5\271\101\0\1\277"+
    "\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8517];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\2\11\10\1\2\11\1\1\13\0"+
    "\11\1\22\0\11\1\24\0\11\1\23\0\4\1\17\0"+
    "\1\11\5\1\1\11\1\0\1\11\7\0\1\11\2\0"+
    "\3\1\2\0\1\11\1\0\1\11\4\0\5\1\5\0"+
    "\2\11\4\1\3\0\4\1\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { return new Symbol(sym.PWXML_OPEN);
          }
        case 25: break;
        case 9: 
          { return new Symbol(sym.ATTR_ID);
          }
        case 26: break;
        case 11: 
          { return new Symbol(sym.ATTR_TIPO);
          }
        case 27: break;
        case 15: 
          { return new Symbol(sym.LISTA_OPEN);
          }
        case 28: break;
        case 17: 
          { return new Symbol(sym.PWXML_CLOSE);
          }
        case 29: break;
        case 20: 
          { return new Symbol(sym.COMANDO_OPEN);
          }
        case 30: break;
        case 24: 
          { return new Symbol(sym.PROPRIETA_CLOSE);
          }
        case 31: break;
        case 19: 
          { return new Symbol(sym.COMANDO_CLOSE);
          }
        case 32: break;
        case 12: 
          { return new Symbol(sym.ATTR_VALUE);
          }
        case 33: break;
        case 5: 
          { return new Symbol(sym.APICI);
          }
        case 34: break;
        case 22: 
          { return new Symbol(sym.TIMESTAMP, new String(yytext()));
          }
        case 35: break;
        case 3: 
          { return new Symbol(sym.STRINGA, new String(yytext()));
          }
        case 36: break;
        case 7: 
          { return new Symbol(sym.PAR_ANG_C);
          }
        case 37: break;
        case 8: 
          { return new Symbol(sym.UG);
          }
        case 38: break;
        case 6: 
          { return new Symbol(sym.DIV);
          }
        case 39: break;
        case 21: 
          { return new Symbol(sym.ATTR_TIMESTAMP);
          }
        case 40: break;
        case 4: 
          { ;
          }
        case 41: break;
        case 18: 
          { return new Symbol(sym.LISTA_CLOSE);
          }
        case 42: break;
        case 2: 
          { return new Symbol(sym.NUMERO, new String(yytext()));
          }
        case 43: break;
        case 13: 
          { return new Symbol(sym.ITEM_OPEN);
          }
        case 44: break;
        case 1: 
          { System.out.println("SCANNER ERROR: "+yytext());
          }
        case 45: break;
        case 10: 
          { return new Symbol(sym.ATTR_NAME);
          }
        case 46: break;
        case 16: 
          { return new Symbol(sym.ITEM_CLOSE);
          }
        case 47: break;
        case 23: 
          { return new Symbol(sym.PROPRIETA_OPEN);
          }
        case 48: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
